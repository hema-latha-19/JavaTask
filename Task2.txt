package JavaTask;
import java.util.*;
public class TransformCodes {

	public static void main(String[] args) 
	{
        Scanner scan = new Scanner(System.in);
        System.out.print("Enter the number of elements: ");
        int count = scan.nextInt();
        int[] input1 = new int[count];
        System.out.println("Enter the elements of the array:");
        for (int i = 0; i < count; i++) 
        {
            input1[i] = scan.nextInt();
        }
        scan.close();
        String[] output = transformCodes(input1);
        System.out.println("Output:");
        System.out.println(Arrays.toString(output));
    }

    public static String[] transformCodes(int[] input1) 
    {
        String[] result = new String[input1.length];
        
        for (int i = 0; i < input1.length; i++) {
            int n = input1[i];
            String answer = "";
            if (String.valueOf(n).length() == 6) {
                answer += "C";
            } else {
                answer += "W";
            }
            if (n == 0) {
                answer += "Z";
            } else if (n == 1) {
                answer += "O";
            } else if (isPrime(n)) {
                answer += "P";
            } else {
                answer += "N";
            }
            int digitSum = getSingleDigitSum(n);
            answer += digitSum;
            if (n % 2 == 0) {
                answer += (n / 2);
            } else {
                answer += ((n - 1) / 2);
            }
            result[i] = answer;
        }

        return result;
    }
    private static boolean isPrime(int n) {
        if (n <= 1) {
            return false;
        }
        if (n <= 3) {
            return true;
        }
        if (n % 2 == 0 || n % 3 == 0) {
            return false;
        }
        int i = 5;
        while (i * i <= n) {
            if (n % i == 0 || n % (i + 2) == 0) {
                return false;
            }
            i += 6;
        }
        return true;
    }
    private static int getSingleDigitSum(int n) {
        int sum = 0;
        while (n > 0 || sum > 9) {
            if (n == 0) {
                n = sum;
                sum = 0;
            }
            sum += n % 10;
            n /= 10;
        }
        return sum;
    }

}
