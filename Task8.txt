import java.util.*;
public class MCET 
{
    static class Node 
    {
        int data;
        Node next;
        public Node(int data)
        {
            this.data = data;
            this.next = null;
        }
    }
    static class LinkedList
    {
        Node head = null;
        void InsertAtEnd(int num)
        {
            Node newnode = new Node(num);
            if(head == null)
            {
                head = newnode;
            }
            else 
            {
                Node tptr = head;
                while(tptr.next != null)
                {
                    tptr = tptr.next;
                }
                tptr.next = newnode;
            }
        }
        void display()
        {
            Node tptr = head ;
            while(tptr != null)
            {
                System.out.print(tptr.data+" ");
                tptr = tptr.next;
            }
        }
    }
    public static void main(String[] args) 
    {
        Scanner input = new Scanner(System.in);
        LinkedList list = new LinkedList();
        int num;
        while(true)
        {
            num = input.nextInt();
            if(num == -1) break;
            list.InsertAtEnd(num);
        }
        list.display();
        input.close();
    }
}














import java.util.*;
public class MCET 
{
    static class Node 
    {
        int data;
        Node next;
        public Node(int data)
        {
            this.data = data;
            this.next = null;
        }
    }
    static class LinkedList
    {
        Node head = null;
        void insert(int num)
        {
            Node newnode = new Node(num);
            if(head == null)
            {
                head = newnode;
            }
            else 
            {
                Node temp = null;
                Node tptr = null;
                for(tptr = head ; tptr != null && num>tptr.data ; temp = tptr , tptr = tptr.next);
                if(tptr == head)
                {
                    newnode.next = head;
                    head = newnode;
                }
                else if(tptr == null)
                {
                    temp.next = newnode;
                }
                else 
                {
                    temp.next = newnode;
                    newnode.next = tptr;
                }
            }
        }
        void display(Node tptr)
        {
            if(tptr != null)
            {
                System.out.print(tptr.data+" ");
                display(tptr.next);
            }
        }
    }
    public static void main(String[] args) 
    {
        Scanner input = new Scanner(System.in);
        LinkedList list = new LinkedList();
        int num;
        while(true)
        {
            num = input.nextInt();
            if(num == -1) break;
            list.insert(num);
        }
        list.display(list.head);
        input.close();
    }
}















import java.util.*;
public class MCET 
{
    static class Node 
    {
        int data;
        Node add;
        public Node(int data)
        {
            this.data = data;
            this.add = null;
        }
    }
    static class LinkedList
    {
        Node head = null;
        void insert(int num)
        {
            Node newnode = new Node(num);
            if(head == null)
            {
                head = newnode;
            }
            else 
            {
                Node temp = null;
                Node tptr = null;
                for(tptr = head ; tptr != null && num>tptr.data ; temp = tptr , tptr = tptr.add);
                if(tptr == head)
                {
                    newnode.add = head;
                    head = newnode;
                }
                else if(tptr == null)
                {
                    temp.add = newnode;
                }
                else 
                {
                    temp.add = newnode;
                    newnode.add = tptr;
                }
            }
        }
        void display(Node tptr)
        {
            if(tptr != null)
            {
                System.out.print(tptr.data+" ");
                display(tptr.add);
            }
        }
        void reverse()
        {
            Node prev = null;
            Node curr = null;
            Node next = head;
            do
            {
                prev = curr;
                curr = next;
                next = next.add;
                curr.add = prev;
            }while(next != null);
            this.head = curr;
        }
    }
    public static void main(String[] args) 
    {
        Scanner input = new Scanner(System.in);
        LinkedList list = new LinkedList();
        int num;
        while(true)
        {
            num = input.nextInt();
            if(num == -1) break;
            list.insert(num);
        }
        list.reverse();
        list.display(list.head);
        input.close();
    }
}









import java.util.*;
public class MCET 
{
    static class Node 
    {
        int data;
        Node add;
        public Node(int data)
        {
            this.data = data;
            this.add = null;
        }
    }
    static class LinkedList
    {
        Node head = null;
        void insert(int num)
        {
            Node newnode = new Node(num);
            if(head == null)
            {
                head = newnode;
            }
            else 
            {
                Node temp = null;
                Node tptr = null;
                for(tptr = head ; tptr != null && num>tptr.data ; temp = tptr , tptr = tptr.add);
                if(tptr == head)
                {
                    newnode.add = head;
                    head = newnode;
                }
                else if(tptr == null)
                {
                    temp.add = newnode;
                }
                else 
                {
                    temp.add = newnode;
                    newnode.add = tptr;
                }
            }
        }
        void display(Node tptr)
        {
            if(tptr != null)
            {
                System.out.print(tptr.data+" ");
                display(tptr.add);
            }
        }
        void reverse_helper(Node tptr,Node prev)
        {
            if(tptr == null)
                head = prev;
            else 
            {
                reverse_helper(tptr.add,tptr);
                tptr.add = prev;
            }
        }
        void reverse()
        {
            reverse_helper(head,null);
        }
    }
    public static void main(String[] args) 
    {
        Scanner input = new Scanner(System.in);
        LinkedList list = new LinkedList();
        int num;
        while(true)
        {
            num = input.nextInt();
            if(num == -1) break;
            list.insert(num);
        }
        list.reverse();
        list.display(list.head);
        input.close();
    }
}











import java.util.*;
public class MCET 
{
    static class Node 
    {
        int data;
        Node add;
        public Node(int data)
        {
            this.data = data;
            this.add = null;
        }
    }
    static class LinkedList
    {
        Node head = null;
        void insert(int num)
        {
            Node newnode = new Node(num);
            if(head == null)
            {
                head = newnode;
            }
            else 
            {
                Node tptr = null;
                for(tptr = head ; tptr.add != null;tptr = tptr.add);
                tptr.add = newnode;
            }
        }
        void display(Node tptr)
        {
            if(tptr != null)
            {
                System.out.print(tptr.data+" ");
                display(tptr.add);
            }
        }
        void reverse_helper(Node tptr,Node prev)
        {
            if(tptr == null)
                head = prev;
            else 
            {
                reverse_helper(tptr.add,tptr);
                tptr.add = prev;
            }
        }
        void reverse()
        {
            reverse_helper(head,null);
        }
    }
    public static void main(String[] args) 
    {
        Scanner input = new Scanner(System.in);
        LinkedList list = new LinkedList();
        int num;
        while(true)
        {
            num = input.nextInt();
            if(num == -1) break;
            list.insert(num);
        }
        list.reverse();
        list.display(list.head);
        input.close();
    }
}









import java.util.*;
public class MCET 
{
    static class Node 
    {
        int data;
        Node add;
        public Node(int data)
        {
            this.data = data;
            this.add = null;
        }
    }
    static class LinkedList
    {
        Node head = null;
        void insert(int num)
        {
            Node newnode = new Node(num);
            if(head == null)
            {
                head = newnode;
            }
            else 
            {
                Node tptr = null;
                for(tptr = head ; tptr.add != null;tptr = tptr.add);
                tptr.add = newnode;
            }
        }
        void display()
        {
            Node tptr = head;
            while(tptr != null)
            {
                System.out.print(tptr.data+" ");
                tptr = tptr.add;
            }
        }
        void deleteAtPos(int pos)
        {
            if(head == null)
            {
                System.err.print("List is Empty\n");
                return;
            }
            if(pos == 1)
            {
                head = head.add;
                return;
            }
            int position = 1;
            Node tptr = head;
            while(tptr != null && position < pos-1) 
            {
                tptr = tptr.add;
                position++;
            }
            if(tptr == null)
            {
                System.out.println("Out of Boundary");
                return;
            }
            tptr.add = tptr.add.add;
        }
    }
    public static void main(String[] args) 
    {
        Scanner input = new Scanner(System.in);
        LinkedList list = new LinkedList();
        int num;
        while(true)
        {
            num = input.nextInt();
            if(num == -1) break;
            list.insert(num);
        }
        list.display();
        int pos = input.nextInt();
        list.deleteAtPos(pos);
        System.out.println();
        list.display();
        input.close();
    }
}




import java.util.*;
public class MCET 
{
    static class Node 
    {
        int data;
        Node add;
        public Node(int data)
        {
            this.data = data;
            this.add = null;
        }
    }
    static class LinkedList
    {
        Node head = null;
        void insert(int num)
        {
            Node newnode = new Node(num);
            if(head == null)
            {
                head = newnode;
                newnode.add = head;
            }
            else 
            {                       
                Node tptr = head;
                do 
                {
                    tptr = tptr.add;
                }while(tptr.add!=head);
                tptr.add = newnode;
                newnode.add = head;
            }
        }
        void display()
        {
            Node tptr = head;
            do 
            {
                System.out.print(tptr.data+" ");
                tptr = tptr.add;
            }while(tptr!=head);
        }
    }
    public static void main(String[] args) 
    {
        Scanner input = new Scanner(System.in);
        LinkedList list = new LinkedList();
        int num;
        while(true)
        {
            num = input.nextInt();
            if(num == -1) break;
            list.insert(num);
        }
        list.display();
        input.close();
    }
}








Lucky Person

Given that N person (numbered 1 to N) standing as to form a circle. They all have the gun in their hand which is pointed to their leftmost Partner. 

Every one shoots such that 1 shoot 2, 3 shoots 4, 5 shoots 6 …. (N-1)the shoot N (if N is even otherwise N shoots 1). 
Again on the second iteration, they shoot the rest of remains as above mentioned logic (now for n as even, 1 will shoot to 3, 5 will shoot to 7 and so on). 

The task is to find which person is the luckiest(didn’t die)?







import java.util.*;
public class MCET 
{
    static class Node 
    {
        int data;
        Node next;
        Node(int num)
        {
            data = num;
            next = null;
        }
    }
    public static void main(String[] args) 
    {
        Scanner input = new Scanner(System.in);
        Node head = null;
        Node tail = null;
        int N = input.nextInt();
        int num = 1;
        while(num<= N)
        {
            Node newnode = new Node(num);
            if(head == null)
                tail = head = newnode;
            else
                tail = tail.next = newnode;
            num++;
        }
        tail.next = head;
        Node prev = head;
        Node curr = head.next;
        while(curr!=prev)
        {
            prev.next = curr.next;
            prev = prev.next;
            curr = curr.next.next;
        }
        System.out.println(curr.data);
        input.close();
    }
}






import java.util.*;
public class MCET 
{
    public static void main(String[] args) 
    {
        Scanner input = new Scanner(System.in);
        int N = input.nextInt();
        int power = (1 << (int)(Math.log10(N)/Math.log10(2)));
        System.out.println((N-power)*2+1);
        input.close();
    }
}
N<<1 ^ power<<1 | 1

20<<1  ^  16<<1 | 1

40 ^ 32 | 1

8  | 1 

9



