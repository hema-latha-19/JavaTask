import java.util.*;
public class MCET 
{
    public static int prec(char ch)
    {
        if(ch == '+' || ch == '-') return 1;
        if(ch == '*' || ch == '/' || ch == '%') return 2;
        if(ch == '^') return 3;
        return 0;
    }
    public static int evaluate(int num1 , int num2 , char op)
    {
        switch(op)
        {
            case '+': return num1+num2;
            case '-': return num1-num2;
            case '*': return num1*num2;
            case '/': return num1/num2;
            case '%': return num1%num2;
            case '^': return (int)Math.pow(num1,num2);
        }
        return 0;
    }
    public static int Eval(char[] post, int len)
    {
        int[] stack = new int[len];
        int top = -1;
        for(int ind = 0 ; ind < len ; ind++)
        {
            if(post[ind] >= '0' && post[ind] <= '9')
            {
                stack[++top] = (int)(post[ind] - '0');
            }
            else 
            {
                int num2 = stack[top--]; 
                int num1 = stack[top--]; 
                stack[++top] = evaluate(num1,num2,post[ind]);
            }
        }
        return stack[top];
    }
    public static int infixTopostfix(String str)
    {
        int len = str.length();
        char[] post = new char[len+1];
        char[] stack = new char[len+1];
        int top = -1;
        int post_top = -1;
        for(int ind = 0 ; ind < len ; ind++)
        {
            char ch = str.charAt(ind);
            if(ch >= '0' && ch <= '9') 
                post[++post_top] = ch;
            else if(ch == '(')
                stack[++top] = ch;
            else if(ch == ')') 
            {
                while(top != -1 && stack[top] != '(')
                    post[++post_top] = stack[top--];
                top--;
            }
            else 
            {
                while(top != -1 && (prec(ch) <= prec(stack[top])))
                    post[++post_top] = stack[top--];
                stack[++top] = ch;
            }
        }
        while(top != -1)
            post[++post_top] = stack[top--];
        post[++post_top] = '\0';
        return Eval(post,post_top);
    }
    public static void main(String[] args) 
    {
        Scanner input = new Scanner(System.in);
        String str = input.next();
        int res = infixTopostfix(str);
        System.out.println(res);
        input.close();
    }
}




import java.util.*;
class BinarySearchTree 
{
    class Node 
    {
        int data;
        Node right;
        Node left;
        public Node(int data)
        {
            this.data = data;
            this.right = null;
            this.left = null;
        }
    }
    Node root = null;
    void create_node(int num)
    {
        Node newnode = new Node(num);
        if(root == null)
        {
            root = newnode;
        }
        else 
        {
            Node temp = null;
            for(Node tptr = root ; tptr != null ; temp = tptr , tptr = (tptr.data < num)?tptr.right:tptr.left);
            if(temp.data < num) temp.right = newnode;
            else temp.left = newnode;
        }
    }
    boolean subtree(Node root1, Node root2)
    {
        if(root1==null && root2==null)
            return true;
        if((root1!=null && root2==null) || (root1==null && root2!=null))
            return false;
        if(root1.data != root2.data)
            return false;
        return subtree(root1.left, root2.left) && subtree(root1.right, root2.right);
    }
    void compare(BinarySearchTree tree2)
    {
        Node root1 = this.root;
        Node root2 = tree2.root;
        while(root1!=null && root1.data != root2.data)
        {
            root1 = (root1.data < root2.data)?root1.right:root1.left;
        }
        if(subtree(root1,root2)==true)
            System.out.print("Subtree");
        else 
            System.out.print("Not");
    }
    void inorder(Node root)
    {
        if(root != null)
        {
            inorder(root.left);
            System.out.print(root.data+" ");
            inorder(root.right);
        }
    }
    void display()
    {
        inorder(root);
    }
}
public class MCET 
{
    public static void main(String[] args) 
    {
        Scanner input = new Scanner(System.in);
        BinarySearchTree tree1 = new BinarySearchTree();
        BinarySearchTree tree2 = new BinarySearchTree();
        int num;
        while(true)
        {
            num = input.nextInt();
            if(num == -1) break;
            tree1.create_node(num);
        }
        while(true)
        {
            num = input.nextInt();
            if(num == -1) break;
            tree2.create_node(num);
        }
        tree1.compare(tree2);
        input.close();
    }
}










import java.util.*;
class Graph 
{
    int N;
    int[][] mat;
    public Graph(int N)
    {
        this.N = N;
        mat = new int[N][N];
    }
    void createMat(int src,int dest)
    {
        mat[src][dest] = 1;
        // mat[dest][src] = 1;
    }
    void display()
    {
        for(int row = 0 ; row < N ; row++)
        {
            for(int col = 0 ; col < N ; col++)
                System.out.print(mat[row][col]+" ");
            System.out.println();
        }
    }
}
public class MCET 
{
    public static void main(String[] args) 
    {
        Scanner input = new Scanner(System.in);
        int  N = 5;
        Graph matrix = new Graph(N);
        matrix.createMat(0,1);
        matrix.createMat(0,2);
        matrix.createMat(1,2);
        matrix.createMat(1,3);
        matrix.createMat(1,4);
        matrix.createMat(2,3);
        matrix.createMat(3,4);
        matrix.display();
        input.close();
    }
}






import java.util.*;
class Node 
{
    int data;
    Node next;
    Node(int num)
    {
        data = num;
        next = null;
    }
}
class Graph 
{
    int N;
    Node[] head;
    public Graph(int N)
    {
        this.N = N;
        head = new Node[N];
    }
    void createList(int src,int dest)
    {
        Node newnode = new Node(src);
        if(head[dest] == null)
            head[dest] = newnode;
        else 
        {
            newnode.next = head[dest];
            head[dest] = newnode;
        }
        newnode = new Node(dest);
        if(head[src] == null)
            head[src] = newnode;
        else 
        {
            newnode.next = head[src];
            head[src] = newnode;
        }

    }
    void display()
    {
        for(int ind = 0 ; ind < N ; ind++)
        {
            Node tptr = head[ind];
            while(tptr != null)
            {
                System.out.print(tptr.data+" ");
                tptr = tptr.next;
            }
            System.out.println();
        }
    }
}
public class MCET 
{
    public static void main(String[] args) 
    {
        Scanner input = new Scanner(System.in);
        int  N = 5;
        Graph matrix = new Graph(N);
        matrix.createList(0,1);
        matrix.createList(0,2);
        matrix.createList(1,2);
        matrix.createList(1,3);
        matrix.createList(1,4);
        matrix.createList(2,3);
        matrix.createList(3,4);
        matrix.display();
        input.close();
    }
}





Problem Description : You are given a maze with N cells. Each cell may have multiple entry points but not more than one exit (i.e. entry/exit points are unidirectional doors like valves).
The cells are named with an integer from 0 to N-1.
You have to find : Find the node number of maximum weight node (Weight of a node is the sum of all nodes pointing to that node).

INPUT FORMAT :
The first line contains the number of cells N.
The second line has a list of N values of the edge[ ] array, where edge[i] conatins the cell number that can be reached from cell 'i' in one step. edge[i] is -1 if the ith doesn't have ans exit.
OUTPUT FORMAT :

First line denotes the node number with maximum weight node.
Sample Input :
23
4 4 1 4 13 8 8 8 0 8 14 9 15 11 -1 10 15 22 22 22 22 22 21
Sample Output :
22



















